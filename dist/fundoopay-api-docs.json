
{
  "swagger": "2.0",
  "info": {
    "description": "FundooPay Ideation Swagger API to deal with serviceProvider and Resident User.",
    "version": "1.0.0",
    "title": "FundooPay Backend API's Specification.",
    "termsOfService": "http://swagger.io/terms/",
    "contact":{
         "name":"Bridgelabz.com",
         "email":"admin@bridgelabz.com"
      },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:8080",
  "basePath": "/fundoopay/v2",
  "schemes": [
    "http"
  ],
  "tags": [{
      "name": "Resident User Registration",
      "description": "Resident User Registration for FundooPay."
    },
    {
      "name": "serviceProvider",
      "description": "Service Provider/Merchant Related Operation"
    },
    {
      "name": "bill",
      "description": "API Related to Bills."
    }

  ],
  "paths": {
    "/serviceProvider": {
      "post": {
        "tags": [
          "serviceProvider"
        ],
        "summary": "Add a new Servcie Provider.",
        "description": "Adding new Servcie Provider.",
        "operationId": "addServiceProvider",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Service Provider object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProvider"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200":{
            "description":"Registerd successfully",
            "schema": {
              "$ref": "#/definitions/serviceProviderResponseSuccess"
            }
          }
        },
        "security": [
          {
            "serviceProvider_auth": [
              "write:serviceProvider",
              "read:serviceProvider"
            ]
          }
        ]
      }
    },
    "/serviceProvider/{spId}": {
      "get": {
        "tags": [
          "serviceProvider"
        ],
        "summary": "Find serviceProvider by ID",
        "description": "Returns a serviceProvider",
        "operationId": "getSpById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "spId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "404": {
            "description": "ServiceProvider not found"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getServiceProviderSuccess"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "serviceProvider_auth": [
              "write:serviceProvider_auth",
              "read:serviceProvider_auth"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "serviceProvider"
        ],
        "summary": "Deletes a serviceProvider",
        "description": "",
        "operationId": "deleteServiceProvider",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "spId",
            "in": "path",
            "description": "serviceProvider id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid serviceProvider value"
          }
        },
        "security": [
          {
            "serviceProvider_auth": [
              "write:serviceProvider",
              "read:serviceProvider"
            ]
          }
        ]
      }
    },
    "/serviceProvider/{spId}/uploadImage": {
      "post": {
        "tags": [
          "serviceProvider"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "spId",
            "in": "path",
            "description": "ID of serviceProvider to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "serviceProvider_auth": [
              "write:serviceProvider",
              "read:serviceProvider"
            ]
          }
        ]
      }
    },
    "/serviceProvider/verifyOTP": {
    "post": {
      "tags": [
        "serviceProvider"
      ],
      "summary": "OTP for varification",
      "description": "for mobile number verification, ServiceProvider given OTP after sent to users registerd mobile number.",
      "operationId": "verifyOTP",
      "produces": [
        "application/xml",
        "application/json"
      ],
      "parameters": [
        {
          "in": "formData",
          "name": "OTP",
          "description": "ServiceProvider valid mobile number",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "ServiceProvider OTP/mobile number verified",
          "headers": {
            "X-Rate-Limit": {
              "type": "integer",
              "format": "int32",
              "description": "calls per hour allowed by the user"
            },
            "X-Expires-After": {
              "type": "string",
              "format": "date-time",
              "description": "date in UTC when token expires"
            }
          },
          "examples": {
            "status":true,
            "message":"Mobile verification Done successfully."
            }

        },
        "405": {
          "description": "Method Not Allowed"
        },
        "500": {
          "description": "Internal Server errors",
          "schema": {
            "$ref": "#/definitions/ErrorResponse"
          }
        },
        "default": {
          "description": "Default operation"
        }
      }
    }
  },
  "/serviceProvider/setLocation/{location}": {
    "post": {
      "tags": [
        "serviceProvider"
      ],
      "summary": "Service provider shop location",
      "description": "Save serviceProvider shop location using google map api",
      "operationId": "setLocation",
      "produces": [
        "application/xml",
        "application/json"
      ],
      "parameters": [
        {
          "in": "path",
          "name": "location",
          "description": "set location for serviceProvider shop",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Location saved successfully",
          "schema": {
            "$ref": "#/definitions/SucessResponse"
          }
        },
        "405": {
          "description": "Method Not Allowed"
        },
        "500": {
          "description": "Internal Server errors",
          "schema": {
            "$ref": "#/definitions/ErrorResponse"
          }
        },
        "default": {
          "description": "default operation"
        }
      }
    }
  },
  "/serviceProvider/setListOfLocality": {
    "post": {
      "tags": [
        "serviceProvider"
      ],
      "summary": "Creates list of Locality with given input List",
      "description": "",
      "operationId": "listOflocality",
      "produces": [
        "application/xml",
        "application/json"
      ],
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "description": "List of user object",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "locality": {
                  "type": "string",
                  "default": "Chembur"
                },
                "societyList": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SocietyInfo"
                  }
                }
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Locality saved successfully"
        },
        "405": {
          "description": "Method Not Allowed"
        },
        "500": {
          "description": "Internal Server errors"
        },
        "default": {
          "description": "default operation"
        }
      }
    }
  },
  "/generateBill": {
    "post": {
      "tags": [
        "bills"
      ],
      "summary": "Generate Bill for Resident User",
      "description": "",
      "operationId": "generateBill",
      "produces": [
        "application/xml",
        "application/json"
      ],
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "description": "Bill Generated By Service Provider.",
          "required": true,
          "schema": {
            "$ref": ""
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Bill Generated successfully",
          "schema": {
            "$ref": "#/definitions/generatedBillResponseSuccess"
          }
          }
        },
        "405": {
          "description": "Method Not Allowed"
        },
        "500": {
          "description": "Internal Server errors"
        },
        "default": {
          "description": "default operation"
        }
      }
    },
    "/getAllBillsByResidentId/{residentId}": {
      "get": {
        "tags": [
          "bills"
        ],
        "summary": "Get all Bills of a Resident User Corresponding to their ID.",
        "description": "",
        "operationId": "getListOfBills",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "residentId",
            "description": "Getting all Bills of a particular Resident User.",
            "required": true,
            "schema": {
              "$ref": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bill Fetched successfully",
            "schema": {
              "$ref": ""
            }
            }
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "500": {
            "description": "Internal Server errors"
          },
          "default": {
            "description": "default operation"
          }
        }
      },
      "/getAllOutstandingBillsByResidentId/{residentId}": {
        "get": {
          "tags": [
            "bills"
          ],
          "summary": "Get all Outstanding Bills of a Resident User Corresponding to their ID.",
          "description": "",
          "operationId": "getListOfOutstandingBills",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "residentId",
              "description": "Getting all Outstanding Bills of a particular Resident User.",
              "required": true,
              "schema": {
                "$ref": ""
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Outstanding Bill Fetched successfully",
              "schema": {
                "$ref": ""
              }
              }
            },
            "405": {
              "description": "Method Not Allowed"
            },
            "500": {
              "description": "Internal Server errors"
            },
            "default": {
              "description": "default operation"
            }
          }
        }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "serviceProvider_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:serviceProvider": "modify serviceProvider in your account",
        "read:serviceProvider": "read your serviceProvider"
      }
    }
  },
  "definitions": {
    "generatedBillResponseSuccess":{
      "properties": {
        "status":{
          "type":"boolean",
          "required":true
        },
        "message":{
          "type":"string",
          "required":true
        },
        "data":{
          "type":"object",
          "required":false,
          "$ref": ""
        }
      },
      "xml": {
        "name": "Bill"
      },
      "example":{
        "status":true,
        "message":"Bill Generated successfully",
        "data":{
          "billId": 1,
          "spId": 1,
          "residentId": 5,
          "billGeneratedDate": "25/10/2017",
          "isBillAccepted":false,
          "isBillPaid":false,
          "billAmount":1200
          }
        }
    },
    "serviceProviderResponseSuccess": {
      "properties": {
        "status":{
          "type":"boolean",
          "required":true
        },
        "message":{
          "type":"string",
          "required":true
        },
        "data":{
          "type":"object",
          "required":false,
          "$ref": "#/definitions/ServiceProvider"
        }
      },
      "xml": {
        "name": "SP User"
      },
      "example":{
        "status":true,
        "message":"SP successfully added..",
        "data":{
          "id": 1,
          "spName": "Natraj",
          "shopName": "Natraj",
          "location": "Govandi Mumbai",
          "serviceType":"Stationery",
          "mobile": "9755400000"
          }
        }
    },
    "getServiceProviderSuccess": {
      "properties": {
        "status":{
          "type":"boolean",
          "required":true
        },
        "message":{
          "type":"string",
          "required":true
        },
        "data":{
          "type":"object",
          "required":false,
          "$ref": "#/definitions/ServiceProvider"
        }
      },
      "xml": {
        "name": "SP User"
      },
      "example":{
        "status":true,
        "message":"Find Service Provider Corresponding to given Id.",
        "data":{
          "id": 1,
          "spName": "Natraj",
          "shopName": "Natraj",
          "location": "Govandi Mumbai",
          "serviceType":"Stationery",
          "mobile": "9755400000"
          }
        }
    },
    "ServiceProvider": {
      "type": "object",
      "properties": {
        "spId": {
          "type": "integer",
          "format": "int64"
        },
        "shopName": {
          "description": "Provide Shop Name . e.g. Natraj",
          "type": "string",
          "default": "Natraj"
        },
        "mobile": {
          "description": "Provide a valid Mobile Number to authenticate. e.g. 99XXXXXXXX",
          "type": "number",
          "default": "Dont add Country Code (eg:+91)"
        },
        "location": {
          "type": "string",
          "description": "Select Shop Location from Map"
        },
        "serviceType": {
          "type": "string",
          "description": "Select the Service type",
          "enum": [
            "Vegetable and Fruit",
            "Milk Suplier",
            "Laundry Service",
            "Stationery",
            "News Paper",
            "Plumbing",
            "Electrical/Electronics",
            "General Store",
            "Other"
          ],
          "default": "Stationery"
        },
        "contactInfo": {
          "type": "object",
          "$ref": "#/definitions/ContactInfo"
        },
        "listOflocality": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "locality": {
                "type": "string",
                "default": "Chembur"
              },
              "SocietyList": {
                "type": "array",
                "items": {
                  "$ref": "#definitions/SocietyInfo"
                }
              }
            }
          }
        }
      },
      "xml": {
        "name": "ServiceProvider"
      },
      "example": {
        "spId": 1,
        "shopName": "Natraj",
        "mobile": "+91-99XXXXXXXX",
        "location": "Bridgelabz Solution",
        "serviceType": "Vegetable and Fruits"
      }
    },
    "ContactInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "spName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profileImage": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      },
      "example": {
        "id": 1,
        "spName": "Veejay",
        "email": "v@gmail.com",
        "profileImage": "Default image"
      }
    },
    "SocietyInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "Object" : {
      "type" : "object",
      "properties": {
      }
    }
  }
}
